<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Miner_WPF"
        x:Class="Miner_WPF.WindowConfig"
        mc:Ignorable="d"
        Title="设置" Height="460" Width="360" WindowStyle="None" ResizeMode="NoResize"
        AllowsTransparency="True"  Background="Transparent" Topmost="True" ShowInTaskbar = "False" Icon="设置.png">
    <!--Resources-->
    <Window.Resources>
        <!--Performance value style-->
        <Style x:Key="PerformanceValueStyle" TargetType="{x:Type Label}">
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Bottom"/>
            <Setter Property="Foreground" Value="{StaticResource DarkBrush}"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontWeight" Value="DemiBold"/>
        </Style>
        <!--Performance introduction style-->
        <Style x:Key="PerformanceIntroStyle" TargetType="{x:Type Label}">
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="{StaticResource InkBrush}"/>
        </Style>
        <!--Parameter introduction style-->
        <Style x:Key="ParameterIntroStyle" TargetType="{x:Type Label}">
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="Foreground" Value="{StaticResource DarkBrush}"/>
            <Setter Property="FontSize" Value="14"/>
        </Style>
        <!--Parameter value style-->
        <Style x:Key="ParameterValueStyle" TargetType="{x:Type TextBox}">
            <Setter Property="Background" Value="{StaticResource LeadBrush}"/>
            <Setter Property="BorderBrush" Value="{StaticResource GrayBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource InkBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Width" Value="264"/>
            <Setter Property="Height" Value="36"/>
            <Setter Property="Margin" Value="5,0,0,0"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="2">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource DullBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        <!--ComboBox style-->
        <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="2" BorderThickness="1" BorderBrush="{StaticResource GrayBrush}" Background="{StaticResource GrayBrush}"/>
                <Border Grid.Column="0" Margin="1"  Background="{StaticResource LeadBrush}"/>
                <Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z" Fill="{StaticResource DarkBrush}"/>
            </Grid>
        </ControlTemplate>
        <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="MinWidth" Value="120" />
            <Setter Property="MinHeight" Value="20" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="EditStates">
                                    <VisualState x:Name="Editable">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ContentSite">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Uneditable" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ToggleButton x:Name="ToggleButton" Template="{StaticResource ComboBoxToggleButton}" Grid.Column="2" Focusable="false" ClickMode="Press" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="3,3,23,3" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                            <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                                <Grid x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border x:Name="DropDownBorder" BorderThickness="1" CornerRadius="2" BorderBrush="{StaticResource GrayBrush}" Background="{StaticResource WhiteBrush}" Margin="0,2,0,0" MinHeight="95"/>
                                    <ScrollViewer Margin="1,0,1,0" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                        <Border x:Name="Border" SnapsToDevicePixels="true" Background="{StaticResource WhiteBrush}" BorderBrush="{StaticResource GrayBrush}" BorderThickness="0,0,0,1" Height="36"  Padding="2,10,0,0">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="SelectionStates">
                                    <VisualState x:Name="Unselected" />
                                    <VisualState x:Name="Selected">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource Gray}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Focused">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource Gray}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ContentPresenter />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--View incoming style-->
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonIncomingStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Transparent}"/>
            <Setter Property="BorderBrush" Value="{StaticResource GrayBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource DarkBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="5">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource DullBrush}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource DullBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--Automatic mining style-->
        <Style x:Key="ToggleSwitchButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource GrayBrush}"/>
            <Setter Property="BorderBrush" Value="{StaticResource DarkGrayBrush}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border" BorderBrush="{StaticResource DarkGrayBrush}" BorderThickness="1" CornerRadius="8" Background="{StaticResource GrayBrush}" SnapsToDevicePixels="true">
                            <Ellipse x:Name="circle" Width="16" Height="16" Fill="{StaticResource WhiteBrush}" StrokeThickness="1" Stroke="{StaticResource DarkGrayBrush}" HorizontalAlignment="Left" Margin="-1,-1,0,-1"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Button.IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource DarkBrush}"/>
                                <Setter Property="HorizontalAlignment" TargetName="circle" Value="Right"/>
                                <Setter Property="Margin" TargetName="circle" Value="0,-1,-1,-1"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--Mining style-->
        <Style x:Key="ButtonMiningStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource DarkBrush}"/>
            <Setter Property="BorderBrush" Value="{StaticResource DarkBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource WhiteBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="5">
                            <ContentPresenter x:Name="contentPresenter" Opacity="0.8" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="1"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <!--Controls-->
    <Grid Background="{StaticResource WhiteBrush}">
        <Grid.RowDefinitions>
            <RowDefinition Height="40"/>
            <RowDefinition Height="80"/>
            <RowDefinition Height="200"/>
            <RowDefinition Height="50"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <!--Header panel-->
        <StackPanel Grid.Row="0" Background="{StaticResource DarkBrush}" Orientation="Horizontal">
            <TextBlock Text="挖矿设置" FontSize="14" Foreground="{StaticResource WhiteBrush}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10,0,0,0"/>
            <TextBlock Width="250"/>
            <TextBlock x:Name="btn_Help" Text="?" Foreground="{StaticResource WhiteBrush}" Background="{StaticResource DarkBrush}" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0.8">
                <TextBlock.Resources>
                    <Style TargetType="TextBlock">
                        <Style.Triggers>
                            <EventTrigger RoutedEvent="UIElement.MouseEnter">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="UIElement.MouseLeave">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" To="0.8" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Resources>
            </TextBlock>
            <TextBlock Width="5"/>
            <Canvas x:Name="btn_Close" Width="24" Height="24" Opacity="0.8">
                <Canvas.Resources>
                    <Style TargetType="{x:Type Canvas}">
                        <Style.Triggers>
                            <EventTrigger RoutedEvent="UIElement.MouseEnter">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="UIElement.MouseLeave">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" To="0.8" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Style.Triggers>
                    </Style>
                </Canvas.Resources>
                <Canvas.Background>
                    <StaticResource ResourceKey="DarkBrush"/>
                </Canvas.Background>
                <Line X1="5" Y1="5" X2="19" Y2="19" Stroke="{StaticResource WhiteBrush}" StrokeThickness="2"/>
                <Line X1="19" Y1="5" X2="5" Y2="19" Stroke="{StaticResource WhiteBrush}" StrokeThickness="2"/>
            </Canvas>
        </StackPanel>
        <!--Performance grid-->
        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="0.6*"/>
                <RowDefinition Height="0.4*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Label Grid.Row="0" Grid.Column="0" Content="{Binding Path=ComputeAbility, Converter={StaticResource PerfomanceLabelContentConverter}}" Style="{StaticResource PerformanceValueStyle}"/>
            <Label Grid.Row="1" Grid.Column="0" Content=" 算力（H/s）" Style="{StaticResource PerformanceIntroStyle}"/>
            <Label Grid.Row="0" Grid.Column="1" Content="{Binding Path=Accept, Converter={StaticResource PerfomanceLabelContentConverter}}" Style="{StaticResource PerformanceValueStyle}"/>
            <Label Grid.Row="1" Grid.Column="1" Content=" 接收（次）" Style="{StaticResource PerformanceIntroStyle}"/>
            <Label Grid.Row="0" Grid.Column="2" Content="{Binding Path=Reject, Converter={StaticResource PerfomanceLabelContentConverter}}" Style="{StaticResource PerformanceValueStyle}"/>
            <Label Grid.Row="1" Grid.Column="2" Content=" 拒绝（次）" Style="{StaticResource PerformanceIntroStyle}"/>
        </Grid>
        <Grid Grid.Row="2">
            <Grid.IsEnabled>
                <MultiBinding Converter="{StaticResource IsParamInputEnabledConverter}">
                    <Binding Path="IsAlive"/>
                    <Binding Path="Config.Automatic"/>
                </MultiBinding>
            </Grid.IsEnabled>
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="0.2*"/>
                <ColumnDefinition Width="0.8*"/>
            </Grid.ColumnDefinitions>
            <Label Grid.Row="0" Grid.Column="0" Content="矿池" Style="{StaticResource ParameterIntroStyle}"/>
            <TextBox x:Name="text_Url" Grid.Row="0" Grid.Column="1" Text="{Binding Path=Config.Url,Mode=TwoWay}" ToolTip="矿池地址" Style="{DynamicResource ParameterValueStyle}" >
                <TextBox.ContextMenu >
                    <ContextMenu Visibility="Collapsed"/>
                </TextBox.ContextMenu>
            </TextBox>
            <TextBlock Grid.Row="0" Grid.Column="1" IsHitTestVisible="False" Text="请输入矿池地址" Foreground="{StaticResource DarkGrayBrush}" FontStyle="Italic" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="10,0,0,0">
                <TextBlock.Style>
                    <Style TargetType="{x:Type TextBlock}">
                        <Setter Property="Visibility" Value="Collapsed"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Text, ElementName=text_Url}" Value="">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Text, ElementName=text_Url}" Value="{x:Null}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
            <Label Grid.Row="1" Grid.Column="0" Content="地址" Style="{StaticResource ParameterIntroStyle}"/>
            <TextBox x:Name="text_User" Grid.Row="1" Grid.Column="1" Text="{Binding Path=Config.User,Mode=TwoWay}" ToolTip="钱包地址" Style="{StaticResource ParameterValueStyle}">
                <TextBox.ContextMenu >
                    <ContextMenu Visibility="Collapsed"/>
                </TextBox.ContextMenu>
            </TextBox>
            <TextBlock  Grid.Row="1" Grid.Column="1" IsHitTestVisible="False" Text="请输入钱包地址" Foreground="{StaticResource DarkGrayBrush}" FontStyle="Italic" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="10,0,0,0">
                <TextBlock.Style>
                    <Style TargetType="{x:Type TextBlock}">
                        <Setter Property="Visibility" Value="Collapsed"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Text, ElementName=text_User}" Value="">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Text, ElementName=text_User}" Value="{x:Null}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
            <Label Grid.Row="2" Grid.Column="0" Content="编号" Style="{StaticResource ParameterIntroStyle}"/>
            <TextBox x:Name="text_Id" Grid.Row="2" Grid.Column="1" Text="{Binding Path=Config.Id,Mode=TwoWay}" ToolTip="矿机编号，可选" Style="{StaticResource ParameterValueStyle}">
                <TextBox.ContextMenu >
                    <ContextMenu Visibility="Collapsed"/>
                </TextBox.ContextMenu>
            </TextBox>
            <TextBlock Grid.Row="2" Grid.Column="1" IsHitTestVisible="False" Text="请输入编号，可选" Foreground="{StaticResource DarkGrayBrush}" FontStyle="Italic" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="10,0,0,0">
                <TextBlock.Style>
                    <Style TargetType="{x:Type TextBlock}">
                        <Setter Property="Visibility" Value="Collapsed"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Text, ElementName=text_Id}" Value="">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Text, ElementName=text_Id}" Value="{x:Null}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
            <Label Grid.Row="3" Grid.Column="0" Content="线程" Style="{StaticResource ParameterIntroStyle}"/>
            <ComboBox x:Name="comboBox_Thread" SelectedValue="{Binding Path=Config.Thread,Mode=TwoWay}" Grid.Row="3" Grid.Column="1" ToolTip="线程数，默认为CPU核数的一半" Width="264" Height="36" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="12" Margin="5,0,0,0"/>
        </Grid>
        <Grid Grid.Row="3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="0.2*"/>
                <ColumnDefinition Width="0.4*"/>
                <ColumnDefinition Width="0.4*"/>
            </Grid.ColumnDefinitions>
            <Label Grid.Column="0" Content="自动" Style="{StaticResource ParameterIntroStyle}"/>
            <ToggleButton x:Name="check_Automatic" IsChecked="{Binding Path=Config.Automatic,Mode=TwoWay}" Grid.Column="1" ToolTip="自动挖矿" Height="16" Width="32" Style="{DynamicResource ToggleSwitchButton}" HorizontalAlignment="Left" Margin="5,0,0,0" Checked="CheckBox_Checked" Unchecked="CheckBox_Unchecked">
                <ToggleButton.IsEnabled>
                    <MultiBinding Converter="{StaticResource IsAutomaticEnabledConverter}" Mode="TwoWay">
                        <Binding Path="IsAlive"/>
                        <Binding Path="Config.Automatic"/>
                    </MultiBinding>
                </ToggleButton.IsEnabled>
            </ToggleButton>
            <Button x:Name="btn_Incoming" Grid.Column="2" Content="查看收益" Width="66" Height="26" Style="{DynamicResource ButtonIncomingStyle}"/>
        </Grid>
        <Button x:Name="btn_Mining" Grid.Row="4" Content="{Binding Path=IsAlive,Mode=TwoWay,Converter={StaticResource MiningButtonContentConverter}}" FontSize="14" Width="300" Height="44" Style="{DynamicResource ButtonMiningStyle}"/>
    </Grid>
</Window>
